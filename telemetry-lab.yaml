---
AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation Template for creating an API Gateway, a DynamoDB table, an S3 bucket, a Lambda function, and an IAM execution role.

Parameters:
  pApiGatewayName:
    Type: String
    Default: "Telemetry-Lab"
  
  pDynamodbName:
    Type: String
    Default: "Telemetry-Lab-DB"
  
  pS3BucketName:
    Type: String
  
  pLambdaFunctionName:
    Type: String
    Default: "Telemetry-Lab-Function-POST"

  pExecRoleName:
    Type: String
  

Resources:
  MyApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: !Ref pApiGatewayName

  MyDynamoDBTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Ref pDynamodbName
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST

  MyS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref pS3BucketName

  MyLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref pExecRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: MyDynamoDBPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource: !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/MyDynamoDBTable'
        - PolicyName: MyS3BucketPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - s3:*
                Resource: !Sub 'arn:aws:s3:::my-s3-bucket/*'

  MyLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Ref pLambdaFunctionName
      Handler: lambda_function.lambda_handler
      Role: !GetAtt MyLambdaExecutionRole.Arn
      Runtime: python3.8
      Code:
        ZipFile: |
          import boto3
          import os          

          dynamodb = boto3.resource('dynamodb')
          table = dynamodb.Table(os.environ['TABLE_NAME'])

          def lambda_handler(event, context):
              response = table.put_item(Item=data)
              return {
                  'statusCode': response['ResponseMetadata']['HTTPStatusCode'],
                  'body': 'Record ' + event['id'] + ' added'
              }

      Environment:
        Variables:
          TABLE_NAME: !Ref pDynamodbName

  MyApiGatewayResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref MyApiGateway
      ParentId: !GetAtt MyApiGateway.RootResourceId
      PathPart: my-resource

  MyApiGatewayMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref MyApiGateway
      ResourceId: !Ref MyApiGatewayResource
      HttpMethod: POST
      AuthorizationType: NONE
      Integration:
        Type: AWS
        IntegrationHttpMethod: POST
        Uri: !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${MyLambdaFunction.Arn}/invocations'
        PassthroughBehavior: WHEN_NO_TEMPLATES

